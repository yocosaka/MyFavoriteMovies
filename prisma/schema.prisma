// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "sqlite"
  provider = "postgresql"
  // url      = env("DATABASE_URL")
    url      = env("SUPABASE_DATABASE_URL")
    directUrl  = env("SUPABASE_DATABASE_DIRECT_URL")
}

model Account {
  id String @id @default(cuid())
  type String
  provider String
  providerAccountId String @map("provider_account_id")
  refresh_token String? @db.Text
  refresh_token_expires_in Int?
  access_token String? @db.Text
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id    String     @id @default(uuid())
  email String  @unique
  name  String?
  image String?

  bio String?
  twitter String?
  facebook String?
  instagram String?

  userMovies UserMovie[]
  accounts Account[]
  emailVerified DateTime? @map("email_verified")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Movie{
  id        Int     @id @default(autoincrement())
  title     String
  release_date String
  poster_path String
  vote_average Int
  vote_count Int
  status String?

  backdrop_path String
  adult Boolean
  popularity Int

  userMovies UserMovie[]
  genres Genre[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id Int @id @default(autoincrement())
  originGenreId Int @unique
  title String
  movies Movie[]
}

model UserMovie {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId Int
  listed Boolean  @default(false)
  watched Boolean @default(false)
  stars Int @default(0)
  comment String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique(fields: [userId, movieId], name: "userMovieId")
}
